from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import os
from utils import convert_and_get_page_count
from payments import generate_qr
from printer import print_file, get_printer_status

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "7553375409:AAFWjmqr58Q7DoKgzkZhTCedcc7LlWX9v3c"
ADMIN_ID = 1039033897
price_per_page = 5
greeting_message = "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (.pdf, .doc, .docx) –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (.jpg, .png) –¥–ª—è –ø–µ—á–∞—Ç–∏."

# --- –ö–û–ú–ê–ù–î–´ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(greeting_message)

async def set_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    global price_per_page
    try:
        price_per_page = int(context.args[0])
        await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price_per_page}‚ÇΩ")
    except:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∏–º–µ—Ä: /price 7")

async def set_greeting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    global greeting_message
    greeting_message = " ".join(context.args)
    await update.message.reply_text("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

async def printer_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    status = get_printer_status()
    await update.message.reply_text(f"üñ® –°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {status}")

# --- –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ---
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    file_ext = os.path.splitext(doc.file_name)[-1].lower()
    if file_ext not in ['.pdf', '.doc', '.docx', '.jpg', '.jpeg', '.png']:
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: .pdf, .doc, .docx, .jpg, .png")
        return

    os.makedirs("files", exist_ok=True)
    file = await doc.get_file()
    original_path = f"files/{file.file_unique_id}{file_ext}"
    await file.download_to_drive(original_path)

    try:
        pdf_path, pages = convert_and_get_page_count(original_path)
        price = pages * price_per_page

        context.user_data['file'] = os.path.abspath(pdf_path)
        context.user_data['price'] = price

        keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–§–∞–π–ª: {doc.file_name}\n–°—Ç—Ä–∞–Ω–∏—Ü: {pages}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ",
            reply_markup=reply_markup
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

# --- –ö–û–õ–õ–ë–≠–ö –û–ü–õ–ê–¢–´ ---
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "pay":
        price = context.user_data.get("price", 0)
        qr_path = generate_qr(price)
        await query.message.reply_photo(photo=open(qr_path, 'rb'), caption="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –¥–ª—è –æ–ø–ª–∞—Ç—ã")

        file_abs_path = context.user_data.get("file")
        try:
            print_file(file_abs_path)
            await query.message.reply_text("‚úÖ –ü–µ—á–∞—Ç—å –Ω–∞—á–∞–ª–∞—Å—å!")
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏: {e}")

# --- –õ–Æ–ë–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ---
async def any_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and not update.message.text.startswith('/'):
        await update.message.reply_text(greeting_message)

# --- –ó–ê–ü–£–°–ö ---
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("price", set_price))
app.add_handler(CommandHandler("setgreet", set_greeting))
app.add_handler(CommandHandler("printer", printer_status))
app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
app.add_handler(CallbackQueryHandler(callback_handler))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), any_message))

if __name__ == "__main__":
    app.run_polling()
